#
# Run pitest and update github in a single step. This simple flow can be used for projects where all PRs come from
# branches in the repo. For OSS projects where PRs come from forks, the more complex two stage flow must be used
#
name: pull request ci
on:
  pull_request:

jobs:
  pull-request-ci:
    # Only run on PRs from the repo. PRs from forks will fail due to lack of permissions and
    # must use the two stage process
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          # important to set a fetch depth of 2. By default the checkout action make no history available
          fetch-depth: 2
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11
      - name: run pitest
        # pitest has been bound to a profile called pitest for normal running
        # we add config to analyse only changes made within a PR and treat surviving mutants as check errors
        # failWhenNoMutations is unset in the pom, as otherwise PRs that do not affect java code would fail
        run: mvn -e -B -Ppitest -Dfeatures="+GIT(from[HEAD~1]), +gitci(level[error])" test
      - name: update pull request
        run: mvn -e -B -DrepoToken=${{ secrets.GITHUB_TOKEN }} pitest-github:github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}